
The MbedTLS config file needs to contain the following directives:

#define MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
#define MBEDTLS_TEST_NULL_ENTROPY
#define MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG



In main use the following:


static const uint8_t random_bytes[]
    = { 0xde, 0xa5, 0xe4, 0x5d, 0x0e, 0xa3, 0x7f, 0xc5, 0xf3, 0x66, 0x23,
        0x2a, 0x50, 0x8f, 0x4a, 0xd2, 0x0e, 0xa1, 0x3d, 0x47, 0xe4, 0xbf,
        0x5f, 0xa4, 0xd5, 0x4a, 0x57, 0xa0, 0xba, 0x01, 0x20, 0x42, 0x08,
        0x70, 0x97, 0x49, 0x6e, 0xfc, 0x58, 0x3f, 0xed, 0x8b, 0x24, 0xa5,
        0xb9, 0xbe, 0x9a, 0x51, 0xde, 0x06, 0x3f, 0x5a, 0x00, 0xa8, 0xb6,
        0x98, 0xa1, 0x6f, 0xd7, 0xf2, 0x9b, 0x54, 0x85 };
        
        
int mbedtls_fake_random(void *rng_state, unsigned char *output, size_t len)
{
    (void)rng_state;
    size_t i;

    /* Requesting more random data than available. */
    if (len > sizeof(random_bytes))
    {
        return 1;
    }

    for (i = 0; i < len; ++i)
    {
        output[i] = random_bytes[i % sizeof(random_bytes)];
    }

    return 0;
}

psa_status_t mbedtls_psa_external_get_random(
    mbedtls_psa_external_random_context_t *context,
    uint8_t *output, size_t output_size, size_t *output_length )
{
    (void) context;

    /* This implementation is for test purposes only!
     * Use the libc non-cryptographic random generator. */
    mbedtls_fake_random( NULL, output, output_size );
    *output_length = output_size;
    return( PSA_SUCCESS );
}


If needed, register mbedtls_fake_random with mbedtls_ctr_drbg_seed() in main

if( ( result = mbedtls_ctr_drbg_seed( &ctr_drbg, mbedtls_fake_random, &entropy,
						   (const unsigned char *) pers,
						   strlen( pers ) ) ) != 0 )
{
	mbedtls_printf( " mbedtls_ctr_drbg_seed returned %d", result );
	break;
}          
	

